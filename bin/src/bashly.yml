name: dde
help: Docker Desktop Environment
version: 0.1.0

environment_variables:

commands:
- name: init
  short: i
  help: "Initializes dde. Only has to be run once from directory docker-dev-environment is installed"

- name: list
  short: l
  help: "Lists all available services"

- name: start
  short: s
  help: "Starts or restarts (if flag -r is given) one or several \n
        containers if provided. Use colon seperated list for multiple containers. \n
        If no containers are given all the containers needed for \n
        an application are started as defined in the local .env file. \n
        See .env.project.sample for documentation"
  args:
    - name: container
      help: Name of container(s)

  flags:
    - long: --restart
      short: -r
      help: "forces restart if container is running"

  examples:
    - "\"dde start\": starts all the containers defined in the variable DOCKER_CONTAINER"
    - "\"dde start -r\": as above, but containers are stopped first if running"
    - "\"dde start -r apache-24,php-fpm-81\": restarts the two given containers"

- name: restart
  short: r
  help: "Shortcut for dde start -r"

  args:
    - name: container
      help: "Name of container(s), see dde start -h for more help"

- name: build
  short: x
  help: "Builds or rebuilds one or multiple containers. \n
          If multiple container building is desired use colon seperated list.\n
          If container list is omitted, all containers needed for your\n
          application (as defined in your local .env file) will be built or \n
          rebuilt.\n
          If the --all option is given, all dde containers are built. \n
          BEWARE: this might take some time. \n
          If the --restart option is given, the service will be restarted after\n
          being built. BEWARE: you can not combine the two options,\n
          as there are too many containers to be run at\n
          the same time.\n\n
          The command uses the --force-rm --no-cache --pull options from\n
          docker-compose build and therefor takes some time. \n
          For more fine grained tuning use\n\n
          docker-compose build -f ${DOCKER_DEV_ENVIRONMENT_HOME}/docker-compose.yml build\n\n
          with the options that suite you best."

  args:
    - name: container
      help: "Name of container(s)"

  flags:
    - long: --all
      short: -a
      help: "Build all containers defined in the dde docker-compose.yml"

    - long: --restart
      short: -r
      help: "restarts (or starts) the (re)built container"

- name: bash
  short: b
  help: "Starts bash in default cli container or alternative container if given"

  flags:
  - long: --run
    short: -r
    help: "Uses docker run instead of docker exec"
  - long: --root
    short: -o
    help: "Starts command as root user"
  - long: --default-working-dir
    short: -d
    help: "Uses default working dir of the container rather than the project root"
  - long: --working-dir
    short: -w
    arg: working_dir
    help: "The working dir to execute the bash in. If not specified the project root is used."
  - long: --service
    short: -s
    arg: service
    help: "The service to execute the command in, defaults to the one \n
            defined in \\$DEFAULT_CONTAINER"

  examples:
  - "dde bash: Starts ab bash on the running default service"
  - "dde bash -r -o -s mysql-80: Starts a bash in a newly created mysql-80 service as root"

- name: command
  short: c
  help: "Executes a specific command on the default (or given via --service) service"
  args:
    - name: command
      required: true
      help: "The command to execute, needs to be quoted if it contains spaces"

  flags:
    - long: --run
      short: -r
      help: "Uses docker run instead of docker exec"
    - long: --root
      short: -o
      help: "Starts command as root user"
    - long: --default-working-dir
      short: -d
      help: "Uses default working dir of the container rather than the project root"
    - long: --working-dir
      short: -w
      arg: working_dir
      help: "The working dir to execute the command in. If not specified the project root is used."
    - long: --service
      short: -s
      arg: service
      help: "The service to execute the command in, defaults to the one \n
            defined in \\$DEFAULT_CONTAINER"
    - long: --no-tty
      short: -T
      help: "Do not allocate tty while executing command. This is needed for execution of cronjobs.\n
              See the documentation for more details"

  examples:
    - "dde command \"ls -l\": lists the dir content on the running default service"
    - "dde c -T -s redis-5 redis-cli flushall: flushes the redis cache from a cron job (i.e. without tty)"

- name: test
  short: t
  help: Test command for development
  args:
    - name: command
      required: true
      help: "The command to execute"

  flags:
    - long: --service
      short: -s
      arg: service
      help: "The service to execute the "
